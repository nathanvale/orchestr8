#!/usr/bin/env sh
set -eu

# Skip pre-push in CI environments
if [ "${CI:-}" = "true" ]; then
  echo "⏭️ Skipping pre-push validation in CI environment"
  exit 0
fi

echo "🔍 Running pre-push validation..."
echo "⏱️ This includes linting, typechecking, testing, and changeset validation"
echo "💡 Tip: Use 'git push --no-verify' to bypass in emergencies"

BRANCH=$(git branch --show-current)
echo "📝 Validating branch: $BRANCH"

# Use centralized base detection logic
. scripts/compute-base.sh

# Branch-aware changeset validation
if [ "$BRANCH" != "main" ] && [ "$BRANCH" != "develop" ]; then
  # Only enforce changesets when actual source code or package config changed
  CHANGED_CODE_COUNT=$(git diff --name-only "$BASE"...HEAD 2>/dev/null | grep -E '^(packages|apps)/.+/(src/.+\.(ts|tsx|js|jsx)|package\.json)$' | wc -l | tr -d '[:space:]' || echo 0)
  if [ "${CHANGED_CODE_COUNT:-0}" -gt 0 ]; then
    NEW_CHANGESETS=$(git diff --name-only "$BASE"...HEAD -- .changeset/*.md 2>/dev/null | wc -l | tr -d '[:space:]')
    if [ "${NEW_CHANGESETS:-0}" -eq 0 ]; then
      echo "⚠️  No new changeset added on feature branch '$BRANCH'"
      echo "💡 This branch modifies code but doesn't include a changeset"
      echo "🔧 Generate one with: pnpm changeset"
      echo "🚀 Or bypass with: git push --no-verify"
      exit 1
    else
      echo "✅ New changeset found (${NEW_CHANGESETS} files)"
    fi
  else
    echo "ℹ️ Code changeset enforcement skipped (no TS/JS/JSON changes since base)"
  fi
fi

# Use changed-only validation for feature branches, full validation for main/develop
if [ "$BRANCH" = "main" ] || [ "$BRANCH" = "develop" ]; then
  echo "🧪 Running full validation suite for $BRANCH..."
  pnpm run validate
else
  echo "🧪 Running changed-only validation for feature branch..."
  pnpm run validate:changed
fi

echo "🎉 All validations passed! Ready to push."
