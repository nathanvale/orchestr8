name: Coverage Check

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]

concurrency:
  group: coverage-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  coverage:
    name: 📊 Coverage Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    env:
      VITEST_SILENT: 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run Tests with Coverage
        run: |
          mkdir -p coverage-reports
          pnpm test:coverage -- --reporter=verbose
        env:
          CI: true

      - name: Generate Coverage Reports
        run: |
          # Generate lcov format for codecov
          if [ -f coverage/lcov.info ]; then
            echo "✅ LCOV coverage report found"
          else
            echo "❌ LCOV coverage report not found"
            exit 1
          fi

          # Generate JSON summary for parsing
          if [ -f coverage/coverage-summary.json ]; then
            echo "✅ Coverage summary JSON found"
          else
            echo "❌ Coverage summary JSON not found"
            exit 1
          fi

      - name: Parse Coverage Data
        id: coverage
        run: |
          # Extract overall coverage percentages
          LINES_PCT=$(node -e "console.log(require('./coverage/coverage-summary.json').total.lines.pct)")
          STATEMENTS_PCT=$(node -e "console.log(require('./coverage/coverage-summary.json').total.statements.pct)")
          FUNCTIONS_PCT=$(node -e "console.log(require('./coverage/coverage-summary.json').total.functions.pct)")
          BRANCHES_PCT=$(node -e "console.log(require('./coverage/coverage-summary.json').total.branches.pct)")

          echo "lines_pct=$LINES_PCT" >> $GITHUB_OUTPUT
          echo "statements_pct=$STATEMENTS_PCT" >> $GITHUB_OUTPUT
          echo "functions_pct=$FUNCTIONS_PCT" >> $GITHUB_OUTPUT
          echo "branches_pct=$BRANCHES_PCT" >> $GITHUB_OUTPUT

          # Check if coverage meets minimum requirements
          COVERAGE_THRESHOLD=39
          if (( $(echo "$LINES_PCT >= $COVERAGE_THRESHOLD" | bc -l) )); then
            echo "coverage_passed=true" >> $GITHUB_OUTPUT
          else
            echo "coverage_passed=false" >> $GITHUB_OUTPUT
          fi

          echo "coverage_threshold=$COVERAGE_THRESHOLD" >> $GITHUB_OUTPUT

      - name: Check Coverage Thresholds
        run: |
          echo "## 📊 Coverage Thresholds Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Current | Threshold | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|---------|-----------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lines | ${{ steps.coverage.outputs.lines_pct }}% | ${{ steps.coverage.outputs.coverage_threshold }}% | $([[ "${{ steps.coverage.outputs.coverage_passed }}" == "true" ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Statements | ${{ steps.coverage.outputs.statements_pct }}% | ${{ steps.coverage.outputs.coverage_threshold }}% | $([[ $(echo "${{ steps.coverage.outputs.statements_pct }} >= ${{ steps.coverage.outputs.coverage_threshold }}" | bc -l) == 1 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Functions | ${{ steps.coverage.outputs.functions_pct }}% | ${{ steps.coverage.outputs.coverage_threshold }}% | $([[ $(echo "${{ steps.coverage.outputs.functions_pct }} >= ${{ steps.coverage.outputs.coverage_threshold }}" | bc -l) == 1 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY
          echo "| Branches | ${{ steps.coverage.outputs.branches_pct }}% | ${{ steps.coverage.outputs.coverage_threshold }}% | $([[ $(echo "${{ steps.coverage.outputs.branches_pct }} >= ${{ steps.coverage.outputs.coverage_threshold }}" | bc -l) == 1 ]] && echo "✅ Pass" || echo "❌ Fail") |" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ steps.coverage.outputs.coverage_passed }}" != "true" ]]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Coverage check failed!** Lines coverage (${{ steps.coverage.outputs.lines_pct }}%) is below the required threshold (${{ steps.coverage.outputs.coverage_threshold }}%)" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**To fix this:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Add tests for uncovered lines" >> $GITHUB_STEP_SUMMARY
            echo "2. Run \`pnpm test:coverage\` locally to see detailed coverage report" >> $GITHUB_STEP_SUMMARY
            echo "3. Check the HTML coverage report in the artifacts" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate Per-Package Coverage
        run: |
          echo "## 📦 Per-Package Coverage" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Package | Lines | Statements | Functions | Branches |" >> $GITHUB_STEP_SUMMARY
          echo "|---------|-------|------------|-----------|----------|" >> $GITHUB_STEP_SUMMARY

          # Parse per-file coverage and group by package
          node -e "
            const coverage = require('./coverage/coverage-summary.json');
            const packages = {};

            Object.keys(coverage).forEach(file => {
              if (file === 'total') return;

              // Extract package name from file path
              const parts = file.split('/');
              let packageName = 'root';

              if (parts.includes('packages')) {
                const pkgIndex = parts.indexOf('packages');
                if (pkgIndex + 1 < parts.length) {
                  packageName = 'packages/' + parts[pkgIndex + 1];
                }
              } else if (parts.includes('apps')) {
                const appIndex = parts.indexOf('apps');
                if (appIndex + 1 < parts.length) {
                  packageName = 'apps/' + parts[appIndex + 1];
                }
              }

              if (!packages[packageName]) {
                packages[packageName] = {
                  lines: { covered: 0, total: 0 },
                  statements: { covered: 0, total: 0 },
                  functions: { covered: 0, total: 0 },
                  branches: { covered: 0, total: 0 }
                };
              }

              const fileCov = coverage[file];
              packages[packageName].lines.covered += fileCov.lines.covered;
              packages[packageName].lines.total += fileCov.lines.total;
              packages[packageName].statements.covered += fileCov.statements.covered;
              packages[packageName].statements.total += fileCov.statements.total;
              packages[packageName].functions.covered += fileCov.functions.covered;
              packages[packageName].functions.total += fileCov.functions.total;
              packages[packageName].branches.covered += fileCov.branches.covered;
              packages[packageName].branches.total += fileCov.branches.total;
            });

            Object.keys(packages).sort().forEach(pkg => {
              const data = packages[pkg];
              const linesPct = data.lines.total > 0 ? (data.lines.covered / data.lines.total * 100).toFixed(1) : '0.0';
              const stmtsPct = data.statements.total > 0 ? (data.statements.covered / data.statements.total * 100).toFixed(1) : '0.0';
              const funcsPct = data.functions.total > 0 ? (data.functions.covered / data.functions.total * 100).toFixed(1) : '0.0';
              const branchesPct = data.branches.total > 0 ? (data.branches.covered / data.branches.total * 100).toFixed(1) : '0.0';

              console.log(\`| \${pkg} | \${linesPct}% | \${stmtsPct}% | \${funcsPct}% | \${branchesPct}% |\`);
            });
          " >> $GITHUB_STEP_SUMMARY

      - name: Upload Coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false
          verbose: true
          flags: unittests
          name: codecov-${{ github.run_id }}

      - name: Upload Coverage Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ github.run_number }}
          path: |
            coverage/
            !coverage/**/*.tmp
          retention-days: 30

      - name: Generate Coverage Badge Data
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p badges
          # Generate badge data for shields.io
          echo "{
            \"schemaVersion\": 1,
            \"label\": \"coverage\",
            \"message\": \"${{ steps.coverage.outputs.lines_pct }}%\",
            \"color\": \"$([[ $(echo "${{ steps.coverage.outputs.lines_pct }} >= 70" | bc -l) == 1 ]] && echo "brightgreen" || [[ $(echo "${{ steps.coverage.outputs.lines_pct }} >= 39" | bc -l) == 1 ]] && echo "yellow" || echo "red")\"
          }" > badges/coverage.json

      - name: Upload Badge Data
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-badge-${{ github.run_number }}
          path: badges/coverage.json
          retention-days: 7

      - name: Comment Coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
            const total = coverage.total;

            const coverageComment = `## 📊 Coverage Report

            | Metric | Coverage | Status |
            |--------|----------|--------|
            | **Lines** | **${total.lines.pct}%** | ${total.lines.pct >= 39 ? '✅' : '❌'} |
            | Statements | ${total.statements.pct}% | ${total.statements.pct >= 39 ? '✅' : '❌'} |
            | Functions | ${total.functions.pct}% | ${total.functions.pct >= 39 ? '✅' : '❌'} |
            | Branches | ${total.branches.pct}% | ${total.branches.pct >= 39 ? '✅' : '❌'} |

            **Threshold:** 39% minimum required

            ${total.lines.pct >= 39 ?
              '✅ **Coverage check passed!**' :
              `❌ **Coverage check failed!** Please add tests to reach the minimum 39% coverage threshold.

            **Current coverage:** ${total.lines.pct}%
            **Required:** 39%
            **Missing:** ${(39 - total.lines.pct).toFixed(1)}%`
            }

            📁 **Detailed Report:** Check the \`coverage-reports-${context.runNumber}\` artifact for the complete HTML coverage report.
            `;

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('📊 Coverage Report')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageComment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageComment
              });
            }

      - name: Fail if Coverage Below Threshold
        if: steps.coverage.outputs.coverage_passed != 'true'
        run: |
          echo "❌ Coverage check failed! Lines coverage (${{ steps.coverage.outputs.lines_pct }}%) is below the required threshold (${{ steps.coverage.outputs.coverage_threshold }}%)"
          echo "Please add tests to improve coverage before merging."
          exit 1