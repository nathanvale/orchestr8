name: Matrix Testing

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  schedule:
    # Run matrix tests weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      include_windows:
        description: 'Include Windows in matrix'
        required: false
        default: 'true'
        type: boolean
      include_older_node:
        description: 'Include older Node.js versions'
        required: false
        default: 'true'
        type: boolean

concurrency:
  group: matrix-${{ github.ref }}
  cancel-in-progress: true

env:
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=4096"

permissions:
  contents: read
  actions: read
  checks: write

jobs:
  matrix-setup:
    name: 🎯 Matrix Configuration
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.setup-matrix.outputs.matrix }}
    steps:
      - name: Setup Matrix Configuration
        id: setup-matrix
        run: |
          # Base matrix configuration
          MATRIX_CONFIG=$(cat << 'EOF'
          {
            "include": [
              {
                "os": "ubuntu-latest",
                "node": "18.x",
                "package-manager": "pnpm",
                "name": "Ubuntu + Node 18 + pnpm"
              },
              {
                "os": "ubuntu-latest",
                "node": "20.x",
                "package-manager": "pnpm",
                "name": "Ubuntu + Node 20 + pnpm"
              },
              {
                "os": "ubuntu-latest",
                "node": "22.x",
                "package-manager": "pnpm",
                "name": "Ubuntu + Node 22 + pnpm"
              },
              {
                "os": "macos-latest",
                "node": "20.x",
                "package-manager": "pnpm",
                "name": "macOS + Node 20 + pnpm"
              },
              {
                "os": "ubuntu-latest",
                "node": "20.x",
                "package-manager": "npm",
                "name": "Ubuntu + Node 20 + npm"
              },
              {
                "os": "ubuntu-latest",
                "node": "20.x",
                "package-manager": "yarn",
                "name": "Ubuntu + Node 20 + yarn"
              }
            ]
          }
          EOF
          )

          # Add Windows if requested (default: true for scheduled runs, false for PRs)
          INCLUDE_WINDOWS="${{ github.event.inputs.include_windows }}"
          if [[ "$INCLUDE_WINDOWS" == "true" ]] || [[ "${{ github.event_name }}" == "schedule" ]]; then
            MATRIX_CONFIG=$(echo "$MATRIX_CONFIG" | jq '.include += [
              {
                "os": "windows-latest",
                "node": "20.x",
                "package-manager": "pnpm",
                "name": "Windows + Node 20 + pnpm"
              }
            ]')
          fi

          # For PR events, reduce matrix to essential combinations only
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            MATRIX_CONFIG=$(cat << 'EOF'
          {
            "include": [
              {
                "os": "ubuntu-latest",
                "node": "20.x",
                "package-manager": "pnpm",
                "name": "Ubuntu + Node 20 + pnpm (Primary)"
              },
              {
                "os": "ubuntu-latest",
                "node": "18.x",
                "package-manager": "pnpm",
                "name": "Ubuntu + Node 18 + pnpm (LTS)"
              },
              {
                "os": "macos-latest",
                "node": "20.x",
                "package-manager": "pnpm",
                "name": "macOS + Node 20 + pnpm"
              }
            ]
          }
          EOF
            )
          fi

          echo "matrix=$MATRIX_CONFIG" >> $GITHUB_OUTPUT
          echo "## 🎯 Matrix Configuration" >> $GITHUB_STEP_SUMMARY
          echo '```json' >> $GITHUB_STEP_SUMMARY
          echo "$MATRIX_CONFIG" | jq . >> $GITHUB_STEP_SUMMARY
          echo '```' >> $GITHUB_STEP_SUMMARY

  test-matrix:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    needs: matrix-setup
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix: ${{ fromJSON(needs.matrix-setup.outputs.matrix) }}
    env:
      VITEST_SILENT: 'true'
      CI: true
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}

      - name: Setup pnpm (if using pnpm)
        if: matrix.package-manager == 'pnpm'
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Yarn (if using yarn)
        if: matrix.package-manager == 'yarn'
        run: |
          corepack enable
          yarn --version

      - name: Get package manager cache directory
        id: cache-dir
        shell: bash
        run: |
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            echo "dir=$(pnpm store path --silent)" >> $GITHUB_OUTPUT
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            echo "dir=$(yarn config get cacheFolder)" >> $GITHUB_OUTPUT
          else
            echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT
          fi

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-dir.outputs.dir }}
          key: ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node }}-${{ hashFiles('**/package.json', '**/pnpm-lock.yaml', '**/yarn.lock', '**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.package-manager }}-${{ matrix.node }}-

      - name: Install dependencies with ${{ matrix.package-manager }}
        run: |
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            pnpm install --frozen-lockfile
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Run linting
        run: |
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            pnpm lint
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            yarn lint
          else
            npm run lint
          fi

      - name: Run type checking
        run: |
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            pnpm typecheck
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            yarn typecheck
          else
            npm run typecheck
          fi

      - name: Run tests
        id: test
        run: |
          mkdir -p test-results
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            pnpm test -- --reporter=junit --outputFile=test-results/junit.xml
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            yarn test -- --reporter=junit --outputFile=test-results/junit.xml
          else
            npm test -- --reporter=junit --outputFile=test-results/junit.xml
          fi

      - name: Build packages
        run: |
          if [[ "${{ matrix.package-manager }}" == "pnpm" ]]; then
            pnpm build
          elif [[ "${{ matrix.package-manager }}" == "yarn" ]]; then
            yarn build
          else
            npm run build
          fi

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.os }}-node${{ matrix.node }}-${{ matrix.package-manager }}-${{ github.run_number }}
          path: test-results/
          retention-days: 14

      - name: Report matrix result
        if: always()
        run: |
          echo "## 📊 Matrix Result: ${{ matrix.name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Step | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Install | $([[ $? -eq 0 ]] && echo "✅" || echo "❌") |" >> $GITHUB_STEP_SUMMARY
          echo "| Lint | $([[ $? -eq 0 ]] && echo "✅" || echo "❌") |" >> $GITHUB_STEP_SUMMARY
          echo "| Typecheck | $([[ $? -eq 0 ]] && echo "✅" || echo "❌") |" >> $GITHUB_STEP_SUMMARY
          echo "| Test | $([[ $? -eq 0 ]] && echo "✅" || echo "❌") |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | $([[ $? -eq 0 ]] && echo "✅" || echo "❌") |" >> $GITHUB_STEP_SUMMARY

  matrix-summary:
    name: 📊 Matrix Test Summary
    runs-on: ubuntu-latest
    needs: [matrix-setup, test-matrix]
    if: always()
    steps:
      - name: Download all test results
        if: always()
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          path: all-test-results

      - name: Generate Matrix Summary
        run: |
          echo "# 🎯 Matrix Testing Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Count successful and failed matrix jobs
          TOTAL_JOBS=$(echo '${{ needs.test-matrix.result }}' | wc -w)
          SUCCESS_COUNT=0
          FAILURE_COUNT=0

          echo "## 📊 Overall Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Parse matrix results
          MATRIX_JSON='${{ needs.matrix-setup.outputs.matrix }}'
          echo "$MATRIX_JSON" | jq -r '.include[].name' | while read -r job_name; do
            # This is a simplified summary - in a real implementation, you'd parse actual job results
            echo "| $job_name | $([[ "${{ needs.test-matrix.result }}" == "success" ]] && echo "✅ PASSED" || echo "❌ FAILED") |" >> $GITHUB_STEP_SUMMARY
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Matrix Configuration Details" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Operating Systems:** ubuntu-latest, macos-latest" >> $GITHUB_STEP_SUMMARY
          if [[ "${{ github.event_name }}" == "schedule" ]] || [[ "${{ github.event.inputs.include_windows }}" == "true" ]]; then
            echo ", windows-latest" >> $GITHUB_STEP_SUMMARY
          fi
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Node.js Versions:** 18.x, 20.x, 22.x" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package Managers:** pnpm, npm, yarn" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [[ "${{ needs.test-matrix.result }}" == "success" ]]; then
            echo "✅ **All matrix combinations passed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "The project is compatible across:" >> $GITHUB_STEP_SUMMARY
            echo "- Multiple Node.js versions (18, 20, 22)" >> $GITHUB_STEP_SUMMARY
            echo "- Multiple operating systems" >> $GITHUB_STEP_SUMMARY
            echo "- Multiple package managers" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Some matrix combinations failed!**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action required:**" >> $GITHUB_STEP_SUMMARY
            echo "1. Check the failed job logs above" >> $GITHUB_STEP_SUMMARY
            echo "2. Fix compatibility issues" >> $GITHUB_STEP_SUMMARY
            echo "3. Consider adding platform-specific workarounds" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📁 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- Test results from all matrix combinations are available in the artifacts section" >> $GITHUB_STEP_SUMMARY
          echo "- Download \`test-results-*\` artifacts to analyze specific failures" >> $GITHUB_STEP_SUMMARY