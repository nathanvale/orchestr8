name: Weekly Paranoid Tests

# Informational only - comprehensive testing for peace of mind
# Does not block CI/CD pipeline

on:
  schedule:
    # 3 AM UTC every Sunday
    - cron: '0 3 * * 0'
  workflow_dispatch:
    inputs:
      stress-iterations:
        description: 'Stress test iterations'
        required: false
        default: '5'
        type: choice
        options: ['3', '5', '10']

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"
  NODE_OPTIONS: "--max-old-space-size=6144"
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}
  TURBO_REMOTE_CACHE_SIGNATURE_KEY: ${{ secrets.TURBO_REMOTE_CACHE_SIGNATURE_KEY }}

permissions:
  contents: read
  issues: write

jobs:
  # Full coverage analysis
  coverage:
    name: Full Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run tests with coverage
        run: pnpm test:coverage

      - name: Check thresholds
        run: |
          node -e "
            const c = require('./coverage/coverage-summary.json').total;
            const threshold = 70;
            const failed = [];
            if (c.lines.pct < threshold) failed.push('Lines: ' + c.lines.pct + '%');
            if (c.statements.pct < threshold) failed.push('Statements: ' + c.statements.pct + '%');
            if (c.functions.pct < threshold) failed.push('Functions: ' + c.functions.pct + '%');
            if (c.branches.pct < threshold) failed.push('Branches: ' + c.branches.pct + '%');
            if (failed.length > 0) {
              console.error('⚠️ Coverage below 70%:', failed);
              process.exit(1);
            }
            console.log('✅ Coverage above 70%');
          "

      - name: Upload coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: paranoid-coverage-${{ github.run_number }}
          path: coverage
          retention-days: 90

  # Stress testing - run tests multiple times
  stress:
    name: Stress Tests
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      matrix:
        test-type: [unit, integration]
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run stress tests
        run: |
          ITERATIONS=${{ github.event.inputs.stress-iterations || '5' }}
          echo "Running $ITERATIONS iterations of ${{ matrix.test-type }} tests"

          for i in $(seq 1 $ITERATIONS); do
            echo "Iteration $i/$ITERATIONS"
            if [ "${{ matrix.test-type }}" = "integration" ]; then
              TEST_MODE=integration pnpm test || exit 1
            else
              pnpm test || exit 1
            fi
          done

          echo "✅ All $ITERATIONS iterations passed"

  # Memory leak detection
  memory:
    name: Memory Leak Detection
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4

      - uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run with low memory
        run: |
          # Run tests with constrained memory to detect leaks
          NODE_OPTIONS="--expose-gc --max-old-space-size=512" pnpm test

  # Summary
  summary:
    name: Summary
    runs-on: ubuntu-latest
    needs: [coverage, stress, memory]
    if: always()
    steps:
      - name: Generate summary
        run: |
          echo "# 🔍 Weekly Paranoid Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Test | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Coverage | ${{ needs.coverage.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Stress | ${{ needs.stress.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory | ${{ needs.memory.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "ℹ️ This workflow is informational only and does not block CI/CD" >> $GITHUB_STEP_SUMMARY

      - name: Create issue if failed
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `🚨 Weekly Paranoid Tests Failed - ${new Date().toISOString().split('T')[0]}`,
              body: `Paranoid tests detected issues:\n\n- Coverage: ${{ needs.coverage.result }}\n- Stress: ${{ needs.stress.result }}\n- Memory: ${{ needs.memory.result }}\n\nSee: ${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID}`,
              labels: ['paranoid-tests', 'automated']
            });
