name: Security Scan

on:
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  push:
    branches: [main, develop]
  schedule:
    # Run weekly security scans on Mondays at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch:

concurrency:
  group: security-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: "20.18.1"
  PNPM_VERSION: "9.15.4"

permissions:
  contents: read
  security-events: write
  pull-requests: write
  actions: read

jobs:
  dependency-scan:
    name: 🔒 Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Run npm audit
        id: audit
        run: |
          echo "## 🔍 npm audit Results" > audit-results.md
          echo "" >> audit-results.md

          # Run audit and capture output
          if pnpm audit --audit-level moderate --json > audit-output.json 2>&1; then
            echo "✅ No moderate or higher severity vulnerabilities found" >> audit-results.md
            echo "audit_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Security vulnerabilities detected" >> audit-results.md
            echo "audit_passed=false" >> $GITHUB_OUTPUT

            # Parse audit results
            if [ -f audit-output.json ]; then
              echo "" >> audit-results.md
              echo "### Vulnerability Summary:" >> audit-results.md
              echo '```json' >> audit-results.md
              cat audit-output.json | head -50 >> audit-results.md
              echo '```' >> audit-results.md
            fi

            echo "" >> audit-results.md
            echo "**Action Required:** Please review and fix the security vulnerabilities before merging." >> audit-results.md
            echo "" >> audit-results.md
            echo "**Fix suggestions:**" >> audit-results.md
            echo "- Run \`pnpm audit fix\` to automatically fix vulnerabilities" >> audit-results.md
            echo "- Run \`pnpm update\` to update dependencies to latest versions" >> audit-results.md
            echo "- Review the \`pnpm audit\` output for manual fixes" >> audit-results.md
          fi

          # Add to step summary
          cat audit-results.md >> $GITHUB_STEP_SUMMARY

      - name: Check for known security advisories
        run: |
          echo "## 🚨 Security Advisory Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check pnpm audit for detailed security info
          if pnpm audit --audit-level info; then
            echo "✅ No known security advisories found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ Security advisories detected - see details above" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Audit Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: audit-results-${{ github.run_number }}
          path: |
            audit-results.md
            audit-output.json
          retention-days: 30

      - name: Comment on PR
        if: github.event_name == 'pull_request' && steps.audit.outputs.audit_passed != 'true'
        uses: actions/github-script@v8
        with:
          script: |
            const fs = require('fs');
            let auditResults = '';
            try {
              auditResults = fs.readFileSync('audit-results.md', 'utf8');
            } catch (error) {
              auditResults = '❌ Failed to read audit results';
            }

            const body = `${auditResults}

            ---
            *This comment is automatically generated by the security scan workflow.*`;

            // Find existing security comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.user.login === 'github-actions[bot]' &&
              comment.body.includes('🔍 npm audit Results')
            );

            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }

      - name: Fail on Security Issues
        if: steps.audit.outputs.audit_passed != 'true'
        run: |
          echo "❌ Security vulnerabilities detected. Please fix before merging."
          exit 1

  license-compliance:
    name: 📄 License Compliance Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Install license checker
        run: pnpm add -D -w license-checker

      - name: Check licenses
        id: license-check
        run: |
          echo "## 📋 License Compliance Report" > license-report.md
          echo "" >> license-report.md

          # Generate license report
          if pnpm exec license-checker --summary --excludePrivatePackages > license-summary.txt 2>&1; then
            echo "✅ License check completed successfully" >> license-report.md
            echo "" >> license-report.md
            echo "### License Summary:" >> license-report.md
            echo '```' >> license-report.md
            cat license-summary.txt >> license-report.md
            echo '```' >> license-report.md
            echo "license_check_passed=true" >> $GITHUB_OUTPUT
          else
            echo "❌ License check failed" >> license-report.md
            echo "license_check_passed=false" >> $GITHUB_OUTPUT
          fi

          # Check for prohibited licenses
          echo "" >> license-report.md
          echo "### Prohibited License Check:" >> license-report.md

          # List of prohibited licenses (customize as needed)
          PROHIBITED_LICENSES=("GPL-2.0" "GPL-3.0" "AGPL-1.0" "AGPL-3.0" "CPOL-1.02" "EPL-1.0")

          PROHIBITED_FOUND=false
          for license in "${PROHIBITED_LICENSES[@]}"; do
            # Check if the prohibited license appears in the license summary (exact match on line)
            if grep -E "^[├└]─ ${license}:" license-summary.txt 2>/dev/null; then
              echo "❌ Prohibited license found: $license" >> license-report.md
              PROHIBITED_FOUND=true
            fi
          done

          if [ "$PROHIBITED_FOUND" = false ]; then
            echo "✅ No prohibited licenses detected" >> license-report.md
          else
            echo "license_check_passed=false" >> $GITHUB_OUTPUT
          fi

          # Add to step summary
          cat license-report.md >> $GITHUB_STEP_SUMMARY

      - name: Generate detailed license report
        run: |
          # Generate detailed license information
          pnpm exec license-checker --json --excludePrivatePackages > detailed-licenses.json 2>/dev/null || echo "{}" > detailed-licenses.json

      - name: Upload License Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: license-reports-${{ github.run_number }}
          path: |
            license-report.md
            license-summary.txt
            detailed-licenses.json
          retention-days: 30

      - name: Fail on License Issues
        if: steps.license-check.outputs.license_check_passed != 'true'
        run: |
          echo "❌ License compliance issues detected. Please review and resolve."
          exit 1

  codeql-analysis:
    name: 🔍 CodeQL SAST Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      security-events: write
      contents: read
    strategy:
      fail-fast: false
      matrix:
        language: [javascript]
    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          config-file: ./.github/codeql/codeql-config.yml

      - name: Setup PNPM with Caching
        uses: ./.github/actions/setup-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: Build for Analysis
        run: |
          # Build packages for analysis
          pnpm build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"
          upload: true

  secret-scan:
    name: 🔐 Secret Detection
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Run secret detection
        run: |
          echo "## 🔐 Secret Detection Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Define patterns to search for secrets (excluding test/mock patterns)
          SECRET_PATTERNS=(
            "password\s*=\s*['\"][^'\"]+['\"]"
            "api[_-]?key\s*[=:]\s*['\"][^'\"]+['\"]"
            "secret\s*[=:]\s*['\"][^'\"]+['\"]"
            "token\s*[=:]\s*['\"][^'\"]+['\"]"
            "-----BEGIN\s+(RSA\s+)?PRIVATE\s+KEY-----"
          )

          SECRETS_FOUND=0
          for pattern in "${SECRET_PATTERNS[@]}"; do
            # Search for pattern but exclude test files, examples, and obvious test values
            if git grep -i -E "$pattern" -- \
              "*.js" "*.ts" "*.jsx" "*.tsx" "*.json" "*.env*" \
              ":!**/__tests__/**" \
              ":!**/__mocks__/**" \
              ":!**/*.test.*" \
              ":!**/*.spec.*" \
              ":!**/examples/**" \
              ":!**/fixtures/**" \
              2>/dev/null | \
              grep -v -E "(mock|test|invalid|example|dummy|fake|'string'|\"string\"|localhost)" 2>/dev/null; then
              SECRETS_FOUND=$((SECRETS_FOUND + 1))
            fi
          done

          if [ $SECRETS_FOUND -eq 0 ]; then
            echo "✅ No hardcoded secrets detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Potential hardcoded secrets found!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Action Required:** Review the detected patterns and ensure no real secrets are committed." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Best practices:**" >> $GITHUB_STEP_SUMMARY
            echo "- Use environment variables for secrets" >> $GITHUB_STEP_SUMMARY
            echo "- Use .env files (not committed to git)" >> $GITHUB_STEP_SUMMARY
            echo "- Use secret management services" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  security-summary:
    name: 📊 Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-scan, license-compliance, codeql-analysis, secret-scan]
    if: always()
    steps:
      - name: Generate Security Summary
        run: |
          echo "# 🛡️ Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Dependency Scan | $([[ "${{ needs.dependency-scan.result }}" == "success" ]] && echo "✅" || echo "❌") | ${{ needs.dependency-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 📄 License Compliance | $([[ "${{ needs.license-compliance.result }}" == "success" ]] && echo "✅" || echo "❌") | ${{ needs.license-compliance.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 SAST Analysis | $([[ "${{ needs.codeql-analysis.result }}" == "success" ]] && echo "✅" || echo "❌") | ${{ needs.codeql-analysis.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔐 Secret Detection | $([[ "${{ needs.secret-scan.result }}" == "success" ]] && echo "✅" || echo "❌") | ${{ needs.secret-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.dependency-scan.result }}" == "success" && "${{ needs.license-compliance.result }}" == "success" && "${{ needs.codeql-analysis.result }}" == "success" && "${{ needs.secret-scan.result }}" == "success" ]]; then
            echo "✅ **All security checks passed!**" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Security issues detected!** Please review and fix the failing checks." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 🔧 Security Resources" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Policy](./SECURITY.md)" >> $GITHUB_STEP_SUMMARY
          echo "- [Dependency Updates](https://github.com/${{ github.repository }}/security/dependabot)" >> $GITHUB_STEP_SUMMARY
          echo "- [Security Advisories](https://github.com/${{ github.repository }}/security/advisories)" >> $GITHUB_STEP_SUMMARY